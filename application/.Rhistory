gamma[i, j] <- (2*gamma[(i-1),j]) - gamma[(i-2),j] + w[i,j]
}
}
for (j in 1:(p-1)){
f[1:n, j] <- bs.x[1:n,(((j-1)*psi)+1):(((j-1)*psi)+psi)] %*% gamma[1:psi, j]
new.f[1:n, j] <- new.bs.x[1:n,(((j-1)*psi)+1):(((j-1)*psi)+psi)] %*% gamma[1:psi,j]
# new.f[1:n,j] <- new.bs.x[1:n,(((j-1)*psi)+1):(((j-1)*psi)+psi)] %*% gamma[1:psi,j]
}
# log(alpha[1:n]) <- sum(f.sum[1:n, 1:(p-1)])
# log(newalpha[1:n]) <- sum(new.f.sum[1:n, 1:(p-1)])
for(i in 1:n){
log(alpha[i]) <- sum(f[i, 1:(p-1)])
log(newalpha[i]) <- sum(new.f[i, 1:(p-1)])
}
# newalpha[1:n] <- nimRowSums(new.f.sum[1:n,1:(p-1)])
for(i in 1:n){
y[i] ~ dpareto(1, alpha[i])
# spy[i] <- (alpha[i]*(y[i]/u)^(-1*alpha[i])*y[i]^(-1)) / C
# ones[i] ~ dbern(spy[i])
}
})
constant <- list(psi = psi, n = n, p = p)
init.alpha <- function() list(list(gamma = matrix(0, nrow = psi, ncol=(p-1))),
list(gamma = matrix(0.1, nrow = psi, ncol=(p-1))))
# y = as.vector(y),
monitor.pred <- c("alpha","gamma", "newalpha")
data <- list(y = as.vector(y), bs.x = bs.x, #C = 1000, u = u,
# ones = as.vector(rep(1, n)),
shape = 0.1, scale = 0.1, new.bs.x = new.bs.x)
fit.v2 <- nimbleMCMC(code = model.penalisation,
constants = constant,
data = data,
monitors = monitor.pred,
inits = init.alpha(),
thin = 20,
niter = 30000,
nburnin = 10000,
# setSeed = 300,
nchains = 2,
# WAIC = TRUE,-
# samplesAsCodaMCMC = TRUE,
summary = TRUE)
source("~/GitHub/Laboratory/Simulation/BayesianPsplines/1shot_listofmatrices.R", echo=TRUE)
dpareto <- nimbleFunction(
run = function(x = double(0), t = double(0, default=1), u = double(0), alpha = double(0), log = integer(0, default = 0)){
log.f <- log(t)*alpha + log(alpha) - log(x/u)*(alpha)- log(x)
returnType(double(0))
if(log) return(log.f)
else return(exp(log.f))
})
rpareto <- nimbleFunction(
run = function(n = integer(0), t = double(0, default=1), u = double(0), alpha = double(0)){
returnType(double(0))
if(n != 1) print("rpareto only allows n = 1; using n = 1.")
dev <- runif(1)
return(t/(1-dev)^(1/alpha))
})
registerDistributions(list(
dpareto = list(
BUGSdist = "dpareto(t, u, alpha)",
Rdist = "dpareto(t, u, alpha)",
pqAvail = FALSE,
range = c(0, Inf)
)
))
model.penalisation <- nimbleCode({
#prior
tau ~ dgamma(shape, scale)
# w ~ dnorm(0, tau)
for (j in 1:(p-1)){
gamma[1, j] ~ dnorm(0, 1)
# gamma[2, j] ~ dnorm(0, 1)
# tau[j] ~ dinvgamma(shape, scale)
w[1,j] ~ dnorm(0, tau)
# w[2,j] ~ dnorm(0, tau)
# w[j] ~ dnorm(0, sqrt(tau[j]))
for (i in 2:psi){
w[i,j] ~ dnorm(0, tau)
gamma[i, j] <- (2*gamma[(i-1),j]) - gamma[(i-2),j] + w[i,j]
}
}
for (j in 1:(p-1)){
f[1:n, j] <- bs.x[1:n,(((j-1)*psi)+1):(((j-1)*psi)+psi)] %*% gamma[1:psi, j]
new.f[1:n, j] <- new.bs.x[1:n,(((j-1)*psi)+1):(((j-1)*psi)+psi)] %*% gamma[1:psi,j]
# new.f[1:n,j] <- new.bs.x[1:n,(((j-1)*psi)+1):(((j-1)*psi)+psi)] %*% gamma[1:psi,j]
}
# log(alpha[1:n]) <- sum(f.sum[1:n, 1:(p-1)])
# log(newalpha[1:n]) <- sum(new.f.sum[1:n, 1:(p-1)])
for(i in 1:n){
log(alpha[i]) <- sum(f[i, 1:(p-1)])
log(newalpha[i]) <- sum(new.f[i, 1:(p-1)])
}
# newalpha[1:n] <- nimRowSums(new.f.sum[1:n,1:(p-1)])
for(i in 1:n){
y[i] ~ dpareto(1, alpha[i])
# spy[i] <- (alpha[i]*(y[i]/u)^(-1*alpha[i])*y[i]^(-1)) / C
# ones[i] ~ dbern(spy[i])
}
})
constant <- list(psi = psi, n = n, p = p)
init.alpha <- function() list(list(gamma = matrix(0, nrow = psi, ncol=(p-1))),
list(gamma = matrix(0.1, nrow = psi, ncol=(p-1))))
# y = as.vector(y),
monitor.pred <- c("alpha","gamma", "newalpha")
data <- list(y = as.vector(y), bs.x = bs.x, #C = 1000, u = u,
# ones = as.vector(rep(1, n)),
shape = 0.1, scale = 0.1, new.bs.x = new.bs.x)
fit.v2 <- nimbleMCMC(code = model.penalisation,
constants = constant,
data = data,
monitors = monitor.pred,
inits = init.alpha(),
thin = 20,
niter = 30000,
nburnin = 10000,
# setSeed = 300,
nchains = 2,
# WAIC = TRUE,-
# samplesAsCodaMCMC = TRUE,
summary = TRUE)
source("~/GitHub/Laboratory/Simulation/BayesianPsplines/1shot_listofmatrices.R", echo=TRUE)
source("~/GitHub/Laboratory/Simulation/BayesianPsplines/1shot_listofmatrices.R", echo=TRUE)
source("~/GitHub/Laboratory/Simulation/BayesianPsplines/1shot_listofmatrices.R", echo=TRUE)
alpha.summary <- fit.v2$summary$all.chains
# saveRDS(alpha.summary, file=paste0("Simulation/BayesianPsplines/results/",date,"-",time, "_sc1_allChains.rds"))
print(alpha.summary)
library(installr)
library(installR)
install.packages("installr")
library(installr)
updateR()
updateR()
library(nimble)
install.packages(c("digest", "jsonlite", "mvtnorm", "processx", "Rcpp", "vctrs", "xml2"))
install.packages("emo")
devtools::install_github("hadley/emo")
library(devtools)
install.packages("devtool")
install.packages("devtools")
library(devtools)
devtools::install_github("hadley/emo")
library(emo)
library(rmutil)
?rbutt
?rburr
library(VGAM)
?rparetoIV
?rburr
y.origin[1]
y
1.853887
yy <- 1.853887
dburr(yy, 1, 5.741868,1)
alp <- 5.741868
rBurr <- function(n){(l*((1-runif(n))^(-1/a)-1))^(1/g)}
dBurr <- function(x){x*((a*g*l^a)*x^(g-1))/((l+x^g)^(a+1))}
pBurr <- function(q){1-(l/(l+q^g))^a}
qBurr <- function(p){q <- (l*((1-p)^(-1/a)-1))^(1/g)q}
qBurr <- function(p){q <- (l*((1-p)^(-1/a)-1))^(1/g) return(q)}
dburr(yy, 1, alp, 1)
a = 1
c= alp
g=alp
l=1
dBurr(yy, a,l,g)
rBurr <- function(n, a, l, g){(l*((1-runif(n))^(-1/a)-1))^(1/g)}
dBurr <- function(x, a, l, g){x*((a*g*l^a)*x^(g-1))/((l+x^g)^(a+1))}
dBurr(yy, a,l,g)
log(k)
log(1)
library(installr)
install.R()
install.packages(c("abess", "alabama", "askpass", "bslib", "checkmate", "cpp11", "crosstalk", "curl", "cyclocomp", "data.table", "datawizard", "dbplyr", "deldir", "digest", "dotCall64", "dplyr", "DT", "EnvStats", "evaluate", "extraDistr", "fansi", "fields", "fontawesome", "fs", "gap", "gap.datasets", "gargle", "gert", "GGally", "ggplot2", "ggplotify", "gtools", "haven", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "igraph", "insight", "JOPS", "jsonlite", "knitr", "ks", "languageserver", "later", "lifecycle", "lintr", "lme4", "lubridate", "maps", "markdown", "matrixStats", "mclust", "MCMCvis", "mev", "multicool", "mvtnorm", "nleqslv", "openssl", "patchwork", "pbv", "pcaPP", "pkgload", "plotly", "plyr", "polyclip", "posterior", "pracma", "prettyunits", "processx", "progress", "promises", "purrr", "QuickJSR", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "ReIns", "rematch", "rjags", "rlang", "rmarkdown", "rprojroot", "RSQLite", "rstan", "sass", "scales", "shiny", "simstudy", "spam", "spatstat.data", "spatstat.geom", "spatstat.utils", "splines2", "StanHeaders", "stringi", "stringr", "styler", "systemfonts", "testthat", "textshaping", "tinytex", "utf8", "uuid", "vctrs", "VGAM", "viridis", "vroom", "waldo", "withr", "xfun", "xml2", "yulab.utils"))
library(stan)
library(rstan)
install.packages(c("BH", "bigmemory", "bigmemory.sri", "brew", "brio", "checkmate", "cli", "cowplot", "data.table", "datawizard", "DBI", "desc", "digest", "dotCall64", "dplyr", "fansi", "fields", "FNN", "fs", "ggh4x", "ggridges", "glue", "gratia", "htmltools", "igraph", "jsonlite", "ks", "languageserver", "lubridate", "maps", "matrixStats", "mvtnorm", "patchwork", "pkgbuild", "pkgload", "plotly", "plyr", "processx", "ps", "purrr", "QuickJSR", "ragg", "Rcpp", "RCurl", "readr", "ReIns", "reprex", "rlang", "roxygen2", "RSQLite", "rstan", "rstanarm", "spam", "spatstat.data", "StanHeaders", "stringi", "tensorA", "timechange", "utf8", "uuid", "vctrs", "withr", "xfun", "xml2", "xts", "yaml", "yulab.utils"))
install.packages(c("checkmate", "cli", "data.table", "digest", "dotCall64", "dplyr", "fansi", "fields", "fs", "glue", "htmltools", "jsonlite", "ks", "languageserver", "lubridate", "maps", "matrixStats", "mvtnorm", "processx", "ps", "purrr", "QuickJSR", "Rcpp", "RCurl", "readr", "ReIns", "rlang", "roxygen2", "rstan", "spam", "StanHeaders", "stringi", "tensorA", "timechange", "utf8", "vctrs", "xfun", "xml2"))
install.packages(c("rstan", "StanHeaders"))
install.packages("INLA")
install.packages("BiocManager")
BiocManager::install("Rgraphviz")
# if (!requireNamespace("BiocManager", quietly = TRUE))
# install.packages("BiocManager")
BiocManager::install("graph")
install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
library(INLA)
#If not available, run this first:
install.packages("Stat2Data")
summary(m1I)
library(INLA)
#If it loaded correctly, you should see this in the output:
#Loading required package: Matrix
#Loading required package: sp
#This is INLA_23.09.09 built 2023-10-16 17:29:11 UTC.
# - See www.r-inla.org/contact-us for how to get help.
#Installation instructions for various operating systems are explained on  https://www.r-inla.org/download-install
#The following code does the full installation. You can try it if INLA has not been installed.
#First installing some of the dependencies (especially on Windows)
#Note that the installation may stop several times, and a pop-up window could appear, where you need to select installation from source or binary (usually binary is ok).
# install.packages("BiocManager")
# BiocManager::install("Rgraphviz")
# # if (!requireNamespace("BiocManager", quietly = TRUE))
#    # install.packages("BiocManager")
# BiocManager::install("graph")
# Installing INLA
# install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
#Loading INLA
#library(INLA)
library(Stat2Data)
#If not available, run this first:
# install.packages("Stat2Data")
data("LongJumpOlympics")   #Makes the dataset available in this R session
Jump <- LongJumpOlympics$Gold
Year <- LongJumpOlympics$Year
#You can get more info about the dataset by the command
#help(topic="LongJumpOlympics",package="Stat2Data")
#1.1. Fit simple linear regression model.
m1 <- lm(Jump ~ Year)
summary(m1)
#Plot data with fit overlaid.
par(mfrow=c(1,1))
plot(Jump ~ Year,xlab="Year",ylab="Jump (m)",
type="n",main="Olympic Gold LongJump Distances (m)",cex=0.6)
text(x=Year,y=Jump,labels=Year)
abline(m1,col="blue")
meanY <- mean(Year)
Year.ctr=Year-meanY
prec.prior <- list(prec=list(prior = "loggamma", param = c(0.1, 0.1)))
prior.beta <- list(mean.intercept = 0, prec.intercept = 0.01,
mean = 0, prec = 0.01)
data=data.frame(Jump,Year.ctr)
m1I <- inla(Jump ~Year.ctr,data=data,control.family=list(hyper=prec.prior),control.fixed=prior.beta)
summary(m1I)
plot(m1I$marginals.fixed$`(Intercept)`, type ="l",xlab="x",ylab="Density",
main='Posterior density of beta0')
plot(m1I$marginals.fixed$Year.ctr, type ="l",xlab="x",ylab="Density",
main='Posterior density of beta1')
#By writing
#names(m1I$marginals.hyperpar)
#we can find out that the precision parameter can be accessed as
#m1I$marginals.hyperpar[[1]]
#m1I$marginals.hyperpar$`Precision for the Gaussian observations` would work too
marg.sigma <- inla.tmarginal(function(tau) tau^(-1/2),
m1I$marginals.hyperpar[[1]])
#Summary statistics of sigma
cat("Summary statistics of sigma\n")
inla.zmarginal(marg.sigma)
#Plot of marginal of sigma
plot(marg.sigma, type ="l",xlab="x",ylab="Density",
main='Posterior density of sigma')
library(INLA)
#If it loaded correctly, you should see this in the output:
#Loading required package: Matrix
#Loading required package: sp
#This is INLA_23.09.09 built 2023-10-16 17:29:11 UTC.
# - See www.r-inla.org/contact-us for how to get help.
#Installation instructions for various operating systems are explained on  https://www.r-inla.org/download-install
#The following code does the full installation. You can try it if INLA has not been installed.
#First installing some of the dependencies (especially on Windows)
#Note that the installation may stop several times, and a pop-up window could appear, where you need to select installation from source or binary (usually binary is ok).
# install.packages("BiocManager")
# BiocManager::install("Rgraphviz")
# # if (!requireNamespace("BiocManager", quietly = TRUE))
#    # install.packages("BiocManager")
# BiocManager::install("graph")
# Installing INLA
# install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
#Loading INLA
#library(INLA)
library(Stat2Data)
#If not available, run this first:
# install.packages("Stat2Data")
data("LongJumpOlympics")   #Makes the dataset available in this R session
Jump <- LongJumpOlympics$Gold
Year <- LongJumpOlympics$Year
#You can get more info about the dataset by the command
#help(topic="LongJumpOlympics",package="Stat2Data")
#1.1. Fit simple linear regression model.
m1 <- lm(Jump ~ Year)
summary(m1)
#Plot data with fit overlaid.
par(mfrow=c(1,1))
plot(Jump ~ Year,xlab="Year",ylab="Jump (m)",
type="n",main="Olympic Gold LongJump Distances (m)",cex=0.6)
text(x=Year,y=Jump,labels=Year)
abline(m1,col="blue")
meanY <- mean(Year)
Year.ctr=Year-meanY
prec.prior <- list(prec=list(prior = "loggamma", param = c(0.1, 0.1)))
prior.beta <- list(mean.intercept = 0, prec.intercept = 0.01,
mean = 0, prec = 0.01)
data=data.frame(Jump,Year.ctr)
m1I <- inla(Jump ~Year.ctr,data=data,control.family=list(hyper=prec.prior),control.fixed=prior.beta)
summary(m1I)
plot(m1I$marginals.fixed$`(Intercept)`, type ="l",xlab="x",ylab="Density",
main='Posterior density of beta0')
plot(m1I$marginals.fixed$Year.ctr, type ="l",xlab="x",ylab="Density",
main='Posterior density of beta1')
#By writing
#names(m1I$marginals.hyperpar)
#we can find out that the precision parameter can be accessed as
#m1I$marginals.hyperpar[[1]]
#m1I$marginals.hyperpar$`Precision for the Gaussian observations` would work too
marg.sigma <- inla.tmarginal(function(tau) tau^(-1/2),
m1I$marginals.hyperpar[[1]])
#Summary statistics of sigma
cat("Summary statistics of sigma\n")
inla.zmarginal(marg.sigma)
#Plot of marginal of sigma
plot(marg.sigma, type ="l",xlab="x",ylab="Density",
main='Posterior density of sigma')
meanY <- mean(Year)
Year.ctr=Year-meanY
prec.prior <- list(prec=list(prior = "loggamma", param = c(0.1, 0.1)))
prior.beta <- list(mean.intercept = 0, prec.intercept = 0.001,
mean = 0, prec = 0.001)
data=data.frame(Jump,Year.ctr)
m1I <- inla(Jump ~Year.ctr,data=data,control.family=list(hyper=prec.prior),control.fixed=prior.beta)
summary(m1I)
plot(m1I$marginals.fixed$`(Intercept)`, type ="l",xlab="x",ylab="Density",
main='Posterior density of beta0')
plot(m1I$marginals.fixed$Year.ctr, type ="l",xlab="x",ylab="Density",
main='Posterior density of beta1')
#By writing
#names(m1I$marginals.hyperpar)
#we can find out that the precision parameter can be accessed as
#m1I$marginals.hyperpar[[1]]
#m1I$marginals.hyperpar$`Precision for the Gaussian observations` would work too
marg.sigma <- inla.tmarginal(function(tau) tau^(-1/2),
m1I$marginals.hyperpar[[1]])
#Summary statistics of sigma
cat("Summary statistics of sigma\n")
inla.zmarginal(marg.sigma)
#Plot of marginal of sigma
plot(marg.sigma, type ="l",xlab="x",ylab="Density",
main='Posterior density of sigma')
summary(m1I)
plot(m1I$marginals.fixed$`(Intercept)`, type ="l",xlab="x",ylab="Density",
main='Posterior density of beta0')
plot(m1I$marginals.fixed$Year.ctr, type ="l",xlab="x",ylab="Density",
main='Posterior density of beta1')
meanY <- mean(Year)
Year.ctr=Year-meanY
prec.prior <- list(prec=list(prior = "loggamma", param = c(0.1, 0.1)))
prior.beta <- list(mean.intercept = 0, prec.intercept = 0.01,
mean = 0, prec = 0.01)
data=data.frame(Jump,Year.ctr)
m1I <- inla(Jump ~Year.ctr,data=data,control.family=list(hyper=prec.prior),control.fixed=prior.beta)
summary(m1I)
plot(m1I$marginals.fixed$`(Intercept)`, type ="l",xlab="x",ylab="Density",
main='Posterior density of beta0')
plot(m1I$marginals.fixed$Year.ctr, type ="l",xlab="x",ylab="Density",
main='Posterior density of beta1')
#By writing
#names(m1I$marginals.hyperpar)
#we can find out that the precision parameter can be accessed as
#m1I$marginals.hyperpar[[1]]
#m1I$marginals.hyperpar$`Precision for the Gaussian observations` would work too
marg.sigma <- inla.tmarginal(function(tau) tau^(-1/2),
m1I$marginals.hyperpar[[1]])
#Summary statistics of sigma
cat("Summary statistics of sigma\n")
inla.zmarginal(marg.sigma)
#Plot of marginal of sigma
plot(marg.sigma, type ="l",xlab="x",ylab="Density",
main='Posterior density of sigma')
meanY <- mean(Year)
Year.ctr=Year-meanY
Year.ctr.2021=c(Year.ctr,2021-meanY)
Jump.2021=c(Jump,NA)
#We are using the same priors as in (ii)
data.2021=data.frame(Jump=Jump.2021,Year.ctr=Year.ctr.2021)
m2I <- inla(Jump ~ Year.ctr,data=data.2021,control.family=list(hyper=prec.prior),
control.fixed=prior.beta,control.predictor = list(compute = TRUE), control.compute = list(config = TRUE))
summary(m2I)
n=length(Year.ctr)
nbsamp=10000;
m2I.samp=inla.posterior.sample(n=nbsamp, result=m2I,selection= list(Predictor=27))
#Obtain the samples from the linear predictors, which is equivalent to the mean of the observations as the link function is the identity here
predictor.samples=inla.posterior.sample.eval(function(...) {Predictor},
m2I.samp)
n=length(Year.ctr)
nbsamp=10000;
m2I.samp=inla.posterior.sample(n=nbsamp, result=m2I,selection= list(Predictor=27))
#Obtain the samples from the linear predictors, which is equivalent to the mean of the observations as the link function is the identity here
predictor.samples=inla.posterior.sample.eval(function(...) {Predictor},
m2I.samp)
m2I.samp
library(INLA)
#If it loaded correctly, you should see this in the output:
#Loading required package: Matrix
#Loading required package: sp
#This is INLA_23.09.09 built 2023-10-16 17:29:11 UTC.
# - See www.r-inla.org/contact-us for how to get help.
#Installation instructions for various operating systems are explained on  https://www.r-inla.org/download-install
#The following code does the full installation. You can try it if INLA has not been installed.
#First installing some of the dependencies (especially on Windows)
#Note that the installation may stop several times, and a pop-up window could appear, where you need to select installation from source or binary (usually binary is ok).
#install.packages("BiocManager")
#BiocManager::install("Rgraphviz")
#if (!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("graph")
#
#Installing INLA
#install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
#Loading INLA
#library(INLA)
library(Stat2Data)
#If not available, run this first:
#install.packages("Stat2Data")
data("LongJumpOlympics")   #Makes the dataset available in this R session
Jump <- LongJumpOlympics$Gold
Year <- LongJumpOlympics$Year
#You can get more info about the dataset by the command
#help(topic="LongJumpOlympics",package="Stat2Data")
#1.1. Fit simple linear regression model.
m1 <- lm(Jump ~ Year)
summary(m1)
#Plot data with fit overlaid.
par(mfrow=c(1,1))
plot(Jump ~ Year,xlab="Year",ylab="Jump (m)",
type="n",main="Olympic Gold LongJump Distances (m)",cex=0.6)
text(x=Year,y=Jump,labels=Year)
abline(m1,col="blue")
meanY <- mean(Year)
Year.ctr=Year-meanY
prec.prior <- list(prec=list(prior = "loggamma", param = c(0.1, 0.1)))
prior.beta <- list(mean.intercept = 0, prec.intercept = 0.01,
mean = 0, prec = 0.01)
data=data.frame(Jump,Year.ctr)
m1I <- inla(Jump ~Year.ctr,data=data,control.family=list(hyper=prec.prior),control.fixed=prior.beta)
summary(m1I)
plot(m1I$marginals.fixed$`(Intercept)`, type ="l",xlab="x",ylab="Density",
main='Posterior density of beta0')
plot(m1I$marginals.fixed$Year.ctr, type ="l",xlab="x",ylab="Density",
main='Posterior density of beta1')
#By writing
#names(m1I$marginals.hyperpar)
#we can find out that the precision parameter can be accessed as
#m1I$marginals.hyperpar[[1]]
#m1I$marginals.hyperpar$`Precision for the Gaussian observations` would work too
marg.sigma <- inla.tmarginal(function(tau) tau^(-1/2),
m1I$marginals.hyperpar[[1]])
#Summary statistics of sigma
cat("Summary statistics of sigma\n")
inla.zmarginal(marg.sigma)
#Plot of marginal of sigma
plot(marg.sigma, type ="l",xlab="x",ylab="Density",
main='Posterior density of sigma')
meanY <- mean(Year)
Year.ctr=Year-meanY
Year.ctr.2021=c(Year.ctr,2021-meanY)
Jump.2021=c(Jump,NA)
#We are using the same priors as in (ii)
data.2021=data.frame(Jump=Jump.2021,Year.ctr=Year.ctr.2021)
m2I <- inla(Jump ~ Year.ctr,data=data.2021,control.family=list(hyper=prec.prior),
control.fixed=prior.beta,control.predictor = list(compute = TRUE), control.compute = list(config = TRUE))
summary(m2I)
Jump.2021
Year.ctr.2021
Year.ctr
meanY
n=length(Year.ctr)
nbsamp=10000;
m2I.samp=inla.posterior.sample(n=nbsamp, result=m2I,selection= list(Predictor=27))
#Obtain the samples from the linear predictors, which is equivalent to the mean of the observations as the link function is the identity here
predictor.samples=unlist(lapply(m2I.samp, function(x)(x$latent[1])))
#We obtain the samples from the parameter sigma using the samples from the precision
sigma.samples=1/sqrt(unlist(lapply(m2I.samp, function(x)(x$hyperpar[1]))))
#We obtain the posterior predictive samples by adding the Gaussian noise from the likelihood to the mean (mu_i=eta_i)
post.pred.samples=predictor.samples+rnorm(nbsamp, mean=0,sd=sigma.samples)
plot(density(post.pred.samples),type ="l",xlab="x",ylab="Density",
main='Posterior predictive density of winning jump length in 2021')
m2I.samp
length(Year.ctr.2021)
source("~/GitHub/Laboratory/Application/model_version1.R", echo=TRUE)
install.packages("RProject.R")
library(rstudioapi)
previewRd("wildfire.Rd")
setwd("~/GitHub/BRSTIR/application")
previewRd("wildfire.Rd")
previewRd("wildfire.Rd")
previewRd("wildfire.Rd")
previewRd("wildfire.Rd")
previewRd("wildfire.Rd")
previewRd("wildfire.Rd")
previewRd("wildfire.Rd")
library(DATAstudio)
data("madeira")
madeira
previewRd("wildfire.Rd")
previewRd("wildfire.Rd")
previewRd("wildfire.Rd")
previewRd("wildfire.Rd")
previewRd("wildfire.Rd")
previewRd("wildfire.Rd")
help(iris)
previewRd("wildfire.Rd")
previewRd("wildfire.Rd")
previewRd("wildfire.Rd")
previewRd("wildfire.Rd")
previewRd("wildfire.Rd")
help(mtcars)
help(diamonds)
help(madeira)
help("DATAstudio")
help("DATAstudio-package")
help.start()
help("DATAstudio")
previewRd("wildfire.Rd")
previewRd("wildfire.Rd")
